package files.exceptions;

import files.datatypes.FilePath;

/**
 * Exception generated by the file subsystem.
 * @author Jaime
 *
 */
public class FileException extends Exception{
	private static final long serialVersionUID = 2219233707558869134L;
	
	/**
	 * Exception thrown when a project id which is not supposed to be used
	 * is already in the database.
	 * @author Jaime
	 *
	 */
	public static class ProjectAlreadyExists extends FileException{

		private static final long serialVersionUID = -3768878269292978253L;
		/**
		 * Project which already exists.
		 */
		FilePath project;
		public ProjectAlreadyExists(final FilePath file) {
			super();
			this.project = file;
		}
		public FilePath getFile() {
			return project;
		}
		
	}
	
	/**
	 * Exception thrown when you try to store a version whose id is already in
	 * the database.
	 * @author Jaime
	 *
	 */
	public static class VersionAlreadyExists extends FileException{

		private static final long serialVersionUID = 1L;
		/**
		 * Version which already exists.
		 */
		String versionId;
		/**
		 * File the version refers to.
		 */
		FilePath file;
		public String getVersionId() {
			return versionId;
		}
		public FilePath getFile() {
			return file;
		}
		public VersionAlreadyExists(final FilePath file, final String versionId) {
			super();
			this.versionId = versionId;
			this.file = file;
		}
		
	}
	
	/**
	 * Thrown when access is solicited to a project which does not exist.
	 * @author Jaime
	 *
	 */
	public static class InexistentProject extends FileException{
		/**
		 * Project which does not exist.
		 */
		private final FilePath project;
		
		public InexistentProject(final FilePath project) {
			super();
			this.project = project;
		}
		/**
		 * @return the project
		 */
		public FilePath getProject() {
			return project;
		}
		private static final long serialVersionUID = 12L;
		
	}
	
	/**
	 * Thrown when access is solicited to a file which does not exist.
	 * @author Jaime
	 *
	 */
	public static class InexistentFile extends FileException{
		/**
		 * File which does not exist.
		 */
		private final FilePath file;

		public InexistentFile(final FilePath file) {
			super();
			this.file = file;
		}

		private static final long serialVersionUID = 12L;
		
	}
	
	/**
	 * Thrown when access is solicited to a version which does not exist.
	 * @author Jaime
	 *
	 */
	public static class InexistentVersion extends FileException{
		/**
		 * Inexistent version.
		 */
		private final String versionId;
		/**
		 * File whose version we will trying to get.
		 */
		private final FilePath file;

		public InexistentVersion(final FilePath file, final String versionId) {
			super();
			this.file = file;
			this.versionId = versionId;
		}

		private static final long serialVersionUID = 13L;
		
	}
	
	
}
